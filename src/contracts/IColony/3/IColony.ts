/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IColonyInterface extends utils.Interface {
  functions: {
    "approveExitRecovery()": FunctionFragment;
    "exitRecoveryMode()": FunctionFragment;
    "numRecoveryRoles()": FunctionFragment;
    "setStorageSlotRecovery(uint256,bytes32)": FunctionFragment;
    "isInRecoveryMode()": FunctionFragment;
    "checkNotAdditionalProtectedVariable(uint256)": FunctionFragment;
    "removeRecoveryRole(address)": FunctionFragment;
    "setRecoveryRole(address)": FunctionFragment;
    "enterRecoveryMode()": FunctionFragment;
    "authority()": FunctionFragment;
    "owner()": FunctionFragment;
    "version()": FunctionFragment;
    "upgrade(uint256)": FunctionFragment;
    "finishUpgrade2To3()": FunctionFragment;
    "finishUpgrade()": FunctionFragment;
    "getColonyNetwork()": FunctionFragment;
    "getToken()": FunctionFragment;
    "setRootRole(address,bool)": FunctionFragment;
    "setArbitrationRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "setArchitectureRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "setFundingRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "setAdministrationRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "hasUserRole(address,uint256,uint8)": FunctionFragment;
    "initialiseColony(address,address)": FunctionFragment;
    "bootstrapColony(address[],int256[])": FunctionFragment;
    "mintTokens(uint256)": FunctionFragment;
    "registerColonyLabel(string,string)": FunctionFragment;
    "updateColonyOrbitDB(string)": FunctionFragment;
    "addDomain(uint256,uint256,uint256)": FunctionFragment;
    "getDomain(uint256)": FunctionFragment;
    "getDomainCount()": FunctionFragment;
    "verifyReputationProof(bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)": FunctionFragment;
    "finalizePayment(uint256,uint256,uint256)": FunctionFragment;
    "setPaymentRecipient(uint256,uint256,uint256,address)": FunctionFragment;
    "setPaymentDomain(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setPaymentSkill(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setPaymentPayout(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "getPayment(uint256)": FunctionFragment;
    "claimPayment(uint256,address)": FunctionFragment;
    "getPaymentCount()": FunctionFragment;
    "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "getTaskCount()": FunctionFragment;
    "getTaskChangeNonce(uint256)": FunctionFragment;
    "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": FunctionFragment;
    "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": FunctionFragment;
    "submitTaskWorkRating(uint256,uint8,bytes32)": FunctionFragment;
    "revealTaskWorkRating(uint256,uint8,uint8,bytes32)": FunctionFragment;
    "generateSecret(bytes32,uint256)": FunctionFragment;
    "getTaskWorkRatingSecretsInfo(uint256)": FunctionFragment;
    "getTaskWorkRatingSecret(uint256,uint8)": FunctionFragment;
    "setTaskManagerRole(uint256,address,uint256,uint256)": FunctionFragment;
    "setTaskEvaluatorRole(uint256,address)": FunctionFragment;
    "setTaskWorkerRole(uint256,address)": FunctionFragment;
    "removeTaskEvaluatorRole(uint256)": FunctionFragment;
    "removeTaskWorkerRole(uint256)": FunctionFragment;
    "setTaskSkill(uint256,uint256)": FunctionFragment;
    "setTaskDomain(uint256,uint256)": FunctionFragment;
    "setTaskBrief(uint256,bytes32)": FunctionFragment;
    "setTaskDueDate(uint256,uint256)": FunctionFragment;
    "submitTaskDeliverable(uint256,bytes32)": FunctionFragment;
    "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)": FunctionFragment;
    "finalizeTask(uint256)": FunctionFragment;
    "cancelTask(uint256)": FunctionFragment;
    "completeTask(uint256)": FunctionFragment;
    "getTask(uint256)": FunctionFragment;
    "getTaskRole(uint256,uint8)": FunctionFragment;
    "setRewardInverse(uint256)": FunctionFragment;
    "getRewardInverse()": FunctionFragment;
    "getTaskPayout(uint256,uint8,address)": FunctionFragment;
    "setTaskManagerPayout(uint256,address,uint256)": FunctionFragment;
    "setTaskEvaluatorPayout(uint256,address,uint256)": FunctionFragment;
    "setTaskWorkerPayout(uint256,address,uint256)": FunctionFragment;
    "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "claimTaskPayout(uint256,uint8,address)": FunctionFragment;
    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "getRewardPayoutInfo(uint256)": FunctionFragment;
    "finalizeRewardPayout(uint256)": FunctionFragment;
    "getFundingPot(uint256)": FunctionFragment;
    "getFundingPotCount()": FunctionFragment;
    "getFundingPotBalance(uint256,address)": FunctionFragment;
    "getFundingPotPayout(uint256,address)": FunctionFragment;
    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "claimColonyFunds(address)": FunctionFragment;
    "getNonRewardPotsTotal(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveExitRecovery"
      | "exitRecoveryMode"
      | "numRecoveryRoles"
      | "setStorageSlotRecovery"
      | "isInRecoveryMode"
      | "checkNotAdditionalProtectedVariable"
      | "removeRecoveryRole"
      | "setRecoveryRole"
      | "enterRecoveryMode"
      | "authority"
      | "owner"
      | "version"
      | "upgrade"
      | "finishUpgrade2To3"
      | "finishUpgrade"
      | "getColonyNetwork"
      | "getToken"
      | "setRootRole"
      | "setArbitrationRole"
      | "setArchitectureRole"
      | "setFundingRole"
      | "setAdministrationRole"
      | "hasUserRole"
      | "initialiseColony"
      | "bootstrapColony"
      | "mintTokens"
      | "registerColonyLabel"
      | "updateColonyOrbitDB"
      | "addDomain"
      | "getDomain"
      | "getDomainCount"
      | "verifyReputationProof"
      | "addPayment"
      | "finalizePayment"
      | "setPaymentRecipient"
      | "setPaymentDomain"
      | "setPaymentSkill"
      | "setPaymentPayout"
      | "getPayment"
      | "claimPayment"
      | "getPaymentCount"
      | "makeTask"
      | "getTaskCount"
      | "getTaskChangeNonce"
      | "executeTaskChange"
      | "executeTaskRoleAssignment"
      | "submitTaskWorkRating"
      | "revealTaskWorkRating"
      | "generateSecret"
      | "getTaskWorkRatingSecretsInfo"
      | "getTaskWorkRatingSecret"
      | "setTaskManagerRole"
      | "setTaskEvaluatorRole"
      | "setTaskWorkerRole"
      | "removeTaskEvaluatorRole"
      | "removeTaskWorkerRole"
      | "setTaskSkill"
      | "setTaskDomain"
      | "setTaskBrief"
      | "setTaskDueDate"
      | "submitTaskDeliverable"
      | "submitTaskDeliverableAndRating"
      | "finalizeTask"
      | "cancelTask"
      | "completeTask"
      | "getTask"
      | "getTaskRole"
      | "setRewardInverse"
      | "getRewardInverse"
      | "getTaskPayout"
      | "setTaskManagerPayout"
      | "setTaskEvaluatorPayout"
      | "setTaskWorkerPayout"
      | "setAllTaskPayouts"
      | "claimTaskPayout"
      | "startNextRewardPayout"
      | "claimRewardPayout"
      | "getRewardPayoutInfo"
      | "finalizeRewardPayout"
      | "getFundingPot"
      | "getFundingPotCount"
      | "getFundingPotBalance"
      | "getFundingPotPayout"
      | "moveFundsBetweenPots"
      | "claimColonyFunds"
      | "getNonRewardPotsTotal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveExitRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numRecoveryRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageSlotRecovery",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkNotAdditionalProtectedVariable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRecoveryRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade2To3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getColonyNetwork",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRootRole",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrationRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setArchitectureRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdministrationRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserRole",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialiseColony",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapColony",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerColonyLabel",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateColonyOrbitDB",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addDomain",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyReputationProof",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPayment",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePayment",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentRecipient",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentDomain",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentSkill",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentPayout",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPayment",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeTask",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskChangeNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTaskChange",
    values: [
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTaskRoleAssignment",
    values: [
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskWorkRating",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealTaskWorkRating",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSecret",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskWorkRatingSecretsInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskWorkRatingSecret",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskManagerRole",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskEvaluatorRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskWorkerRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTaskEvaluatorRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTaskWorkerRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskSkill",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskDomain",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskBrief",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskDueDate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskDeliverable",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskDeliverableAndRating",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskRole",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardInverse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardInverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskPayout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskManagerPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskEvaluatorPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskWorkerPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllTaskPayouts",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTaskPayout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startNextRewardPayout",
    values: [string, BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardPayout",
    values: [
      BigNumberish,
      BigNumberish[],
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPayoutInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRewardPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPotCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPotBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPotPayout",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "moveFundsBetweenPots",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimColonyFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonRewardPotsTotal",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveExitRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numRecoveryRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageSlotRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNotAdditionalProtectedVariable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRecoveryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade2To3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getColonyNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRootRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrationRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArchitectureRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdministrationRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialiseColony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapColony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerColonyLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateColonyOrbitDB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addDomain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDomain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyReputationProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentSkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskChangeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTaskChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTaskRoleAssignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskWorkRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealTaskWorkRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskWorkRatingSecretsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskWorkRatingSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskManagerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskEvaluatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskWorkerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTaskEvaluatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTaskWorkerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskSkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskBrief",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskDueDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskDeliverable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskDeliverableAndRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardInverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardInverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskManagerPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskEvaluatorPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskWorkerPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllTaskPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTaskPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNextRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPayoutInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPotBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPotPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveFundsBetweenPots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimColonyFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonRewardPotsTotal",
    data: BytesLike
  ): Result;

  events: {
    "ColonyInitialised(address,address)": EventFragment;
    "ColonyBootstrapped(address[],int256[])": EventFragment;
    "ColonyUpgraded(uint256,uint256)": EventFragment;
    "ColonyRoleSet(address,uint256,uint8,bool)": EventFragment;
    "ColonyFundsMovedBetweenFundingPots(uint256,uint256,uint256,address)": EventFragment;
    "ColonyFundsClaimed(address,uint256,uint256)": EventFragment;
    "RewardPayoutCycleStarted(uint256)": EventFragment;
    "RewardPayoutCycleEnded(uint256)": EventFragment;
    "RewardPayoutClaimed(uint256,address,uint256,uint256)": EventFragment;
    "ColonyRewardInverseSet(uint256)": EventFragment;
    "PaymentAdded(uint256)": EventFragment;
    "TaskAdded(uint256)": EventFragment;
    "TaskBriefSet(uint256,bytes32)": EventFragment;
    "TaskDueDateSet(uint256,uint256)": EventFragment;
    "TaskDomainSet(uint256,uint256)": EventFragment;
    "TaskSkillSet(uint256,uint256)": EventFragment;
    "TaskRoleUserSet(uint256,uint8,address)": EventFragment;
    "TaskPayoutSet(uint256,uint8,address,uint256)": EventFragment;
    "TaskDeliverableSubmitted(uint256,bytes32)": EventFragment;
    "TaskCompleted(uint256)": EventFragment;
    "TaskWorkRatingRevealed(uint256,uint8,uint8)": EventFragment;
    "TaskFinalized(uint256)": EventFragment;
    "PayoutClaimed(uint256,address,uint256)": EventFragment;
    "TaskCanceled(uint256)": EventFragment;
    "DomainAdded(uint256)": EventFragment;
    "FundingPotAdded(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ColonyInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyBootstrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyRoleSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ColonyFundsMovedBetweenFundingPots"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyFundsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyRewardInverseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskBriefSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDueDateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDomainSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskSkillSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskRoleUserSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskPayoutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDeliverableSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskWorkRatingRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingPotAdded"): EventFragment;
}

export interface ColonyInitialisedEventObject {
  colonyNetwork: string;
  token: string;
}
export type ColonyInitialisedEvent = TypedEvent<
  [string, string],
  ColonyInitialisedEventObject
>;

export type ColonyInitialisedEventFilter =
  TypedEventFilter<ColonyInitialisedEvent>;

export interface ColonyBootstrappedEventObject {
  users: string[];
  amounts: BigNumber[];
}
export type ColonyBootstrappedEvent = TypedEvent<
  [string[], BigNumber[]],
  ColonyBootstrappedEventObject
>;

export type ColonyBootstrappedEventFilter =
  TypedEventFilter<ColonyBootstrappedEvent>;

export interface ColonyUpgradedEventObject {
  oldVersion: BigNumber;
  newVersion: BigNumber;
}
export type ColonyUpgradedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ColonyUpgradedEventObject
>;

export type ColonyUpgradedEventFilter = TypedEventFilter<ColonyUpgradedEvent>;

export interface ColonyRoleSetEventObject {
  user: string;
  domainId: BigNumber;
  role: number;
  setTo: boolean;
}
export type ColonyRoleSetEvent = TypedEvent<
  [string, BigNumber, number, boolean],
  ColonyRoleSetEventObject
>;

export type ColonyRoleSetEventFilter = TypedEventFilter<ColonyRoleSetEvent>;

export interface ColonyFundsMovedBetweenFundingPotsEventObject {
  fromPot: BigNumber;
  toPot: BigNumber;
  amount: BigNumber;
  token: string;
}
export type ColonyFundsMovedBetweenFundingPotsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  ColonyFundsMovedBetweenFundingPotsEventObject
>;

export type ColonyFundsMovedBetweenFundingPotsEventFilter =
  TypedEventFilter<ColonyFundsMovedBetweenFundingPotsEvent>;

export interface ColonyFundsClaimedEventObject {
  token: string;
  fee: BigNumber;
  payoutRemainder: BigNumber;
}
export type ColonyFundsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ColonyFundsClaimedEventObject
>;

export type ColonyFundsClaimedEventFilter =
  TypedEventFilter<ColonyFundsClaimedEvent>;

export interface RewardPayoutCycleStartedEventObject {
  rewardPayoutId: BigNumber;
}
export type RewardPayoutCycleStartedEvent = TypedEvent<
  [BigNumber],
  RewardPayoutCycleStartedEventObject
>;

export type RewardPayoutCycleStartedEventFilter =
  TypedEventFilter<RewardPayoutCycleStartedEvent>;

export interface RewardPayoutCycleEndedEventObject {
  rewardPayoutId: BigNumber;
}
export type RewardPayoutCycleEndedEvent = TypedEvent<
  [BigNumber],
  RewardPayoutCycleEndedEventObject
>;

export type RewardPayoutCycleEndedEventFilter =
  TypedEventFilter<RewardPayoutCycleEndedEvent>;

export interface RewardPayoutClaimedEventObject {
  rewardPayoutId: BigNumber;
  user: string;
  fee: BigNumber;
  rewardRemainder: BigNumber;
}
export type RewardPayoutClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RewardPayoutClaimedEventObject
>;

export type RewardPayoutClaimedEventFilter =
  TypedEventFilter<RewardPayoutClaimedEvent>;

export interface ColonyRewardInverseSetEventObject {
  rewardInverse: BigNumber;
}
export type ColonyRewardInverseSetEvent = TypedEvent<
  [BigNumber],
  ColonyRewardInverseSetEventObject
>;

export type ColonyRewardInverseSetEventFilter =
  TypedEventFilter<ColonyRewardInverseSetEvent>;

export interface PaymentAddedEventObject {
  paymentId: BigNumber;
}
export type PaymentAddedEvent = TypedEvent<
  [BigNumber],
  PaymentAddedEventObject
>;

export type PaymentAddedEventFilter = TypedEventFilter<PaymentAddedEvent>;

export interface TaskAddedEventObject {
  taskId: BigNumber;
}
export type TaskAddedEvent = TypedEvent<[BigNumber], TaskAddedEventObject>;

export type TaskAddedEventFilter = TypedEventFilter<TaskAddedEvent>;

export interface TaskBriefSetEventObject {
  taskId: BigNumber;
  specificationHash: string;
}
export type TaskBriefSetEvent = TypedEvent<
  [BigNumber, string],
  TaskBriefSetEventObject
>;

export type TaskBriefSetEventFilter = TypedEventFilter<TaskBriefSetEvent>;

export interface TaskDueDateSetEventObject {
  taskId: BigNumber;
  dueDate: BigNumber;
}
export type TaskDueDateSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  TaskDueDateSetEventObject
>;

export type TaskDueDateSetEventFilter = TypedEventFilter<TaskDueDateSetEvent>;

export interface TaskDomainSetEventObject {
  taskId: BigNumber;
  domainId: BigNumber;
}
export type TaskDomainSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  TaskDomainSetEventObject
>;

export type TaskDomainSetEventFilter = TypedEventFilter<TaskDomainSetEvent>;

export interface TaskSkillSetEventObject {
  taskId: BigNumber;
  skillId: BigNumber;
}
export type TaskSkillSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  TaskSkillSetEventObject
>;

export type TaskSkillSetEventFilter = TypedEventFilter<TaskSkillSetEvent>;

export interface TaskRoleUserSetEventObject {
  taskId: BigNumber;
  role: number;
  user: string;
}
export type TaskRoleUserSetEvent = TypedEvent<
  [BigNumber, number, string],
  TaskRoleUserSetEventObject
>;

export type TaskRoleUserSetEventFilter = TypedEventFilter<TaskRoleUserSetEvent>;

export interface TaskPayoutSetEventObject {
  taskId: BigNumber;
  role: number;
  token: string;
  amount: BigNumber;
}
export type TaskPayoutSetEvent = TypedEvent<
  [BigNumber, number, string, BigNumber],
  TaskPayoutSetEventObject
>;

export type TaskPayoutSetEventFilter = TypedEventFilter<TaskPayoutSetEvent>;

export interface TaskDeliverableSubmittedEventObject {
  taskId: BigNumber;
  deliverableHash: string;
}
export type TaskDeliverableSubmittedEvent = TypedEvent<
  [BigNumber, string],
  TaskDeliverableSubmittedEventObject
>;

export type TaskDeliverableSubmittedEventFilter =
  TypedEventFilter<TaskDeliverableSubmittedEvent>;

export interface TaskCompletedEventObject {
  taskId: BigNumber;
}
export type TaskCompletedEvent = TypedEvent<
  [BigNumber],
  TaskCompletedEventObject
>;

export type TaskCompletedEventFilter = TypedEventFilter<TaskCompletedEvent>;

export interface TaskWorkRatingRevealedEventObject {
  taskId: BigNumber;
  role: number;
  rating: number;
}
export type TaskWorkRatingRevealedEvent = TypedEvent<
  [BigNumber, number, number],
  TaskWorkRatingRevealedEventObject
>;

export type TaskWorkRatingRevealedEventFilter =
  TypedEventFilter<TaskWorkRatingRevealedEvent>;

export interface TaskFinalizedEventObject {
  taskId: BigNumber;
}
export type TaskFinalizedEvent = TypedEvent<
  [BigNumber],
  TaskFinalizedEventObject
>;

export type TaskFinalizedEventFilter = TypedEventFilter<TaskFinalizedEvent>;

export interface PayoutClaimedEventObject {
  fundingPotId: BigNumber;
  token: string;
  amount: BigNumber;
}
export type PayoutClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PayoutClaimedEventObject
>;

export type PayoutClaimedEventFilter = TypedEventFilter<PayoutClaimedEvent>;

export interface TaskCanceledEventObject {
  taskId: BigNumber;
}
export type TaskCanceledEvent = TypedEvent<
  [BigNumber],
  TaskCanceledEventObject
>;

export type TaskCanceledEventFilter = TypedEventFilter<TaskCanceledEvent>;

export interface DomainAddedEventObject {
  domainId: BigNumber;
}
export type DomainAddedEvent = TypedEvent<[BigNumber], DomainAddedEventObject>;

export type DomainAddedEventFilter = TypedEventFilter<DomainAddedEvent>;

export interface FundingPotAddedEventObject {
  fundingPotId: BigNumber;
}
export type FundingPotAddedEvent = TypedEvent<
  [BigNumber],
  FundingPotAddedEventObject
>;

export type FundingPotAddedEventFilter = TypedEventFilter<FundingPotAddedEvent>;

export interface IColony extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IColonyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
     */
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
     */
    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Return number of recovery roles.
     * @returns numRoles Number of users with the recovery role.
     */
    numRecoveryRoles(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numRoles: BigNumber }>;

    /**
     * certain critical variables are protected from editing in this function
     * Update value of arbitrary storage variable. Can only be called by user with recovery role.
     * @param _slot Uint address of storage slot to be updated
     * @param _value word of data to be set
     */
    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Is colony network in recovery mode.
     * @returns inRecoveryMode Return true if recovery mode is active, false otherwise
     */
    isInRecoveryMode(
      overrides?: CallOverrides
    ): Promise<[boolean] & { inRecoveryMode: boolean }>;

    /**
     * No return value, but should throw if protected.This is public, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
     * Check whether the supplied slot is a protected variable specific to this contract
     * @param _slot The storage slot number to check.
     */
    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    /**
     * Remove colony recovery role. Can only be called by root role.
     * @param _user User we want to remove recovery role from
     */
    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set new colony recovery role. Can be called by root.
     * @param _user User we want to give a recovery role to
     */
    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Put colony network mining into recovery mode. Can only be called by user with recovery role.
     */
    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the `ColonyAuthority` for the colony.
     * @returns colonyAuthority The `ColonyAuthority` contract address
     */
    authority(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyAuthority: string }>;

    /**
     * Used for testing.
     * Get the colony `owner` address. This should be address(0x0) at all times.
     * @returns colonyOwner Address of the colony owner
     */
    owner(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyOwner: string }>;

    /**
     * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
     * @returns colonyVersion Version number
     */
    version(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { colonyVersion: BigNumber }>;

    /**
     * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
     * Upgrades a colony to a new Colony contract version `_newVersion`.
     * @param _newVersion The target version for the upgrade
     */
    upgrade(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets up the permission for those with root permission to be able to call updateColonyOrbitDB, which is new in v3Should be removed in v4, and only `finishUpgrade` should be used, introduced in v3.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade2To3(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be public so it can be an external call.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
     * Returns the colony network address set on the Colony.
     * @returns colonyNetwork The address of Colony Network instance
     */
    getColonyNetwork(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyNetwork: string }>;

    /**
     * Get the colony token.
     * @returns tokenAddress Address of the token contract
     */
    getToken(
      overrides?: CallOverrides
    ): Promise<[string] & { tokenAddress: string }>;

    /**
     * Set new colony root role. Can be called by root role only.
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an root role to
     */
    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set new colony arbitration role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an arbitration role to
     */
    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set new colony architecture role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an architecture role to
     */
    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set new colony funding role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an funding role to
     */
    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set new colony admin role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an admin role to
     */
    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
     * @param _domainId The domain where we want to check for the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     * @returns hasRole Boolean indicating whether the given user has the given role in domain
     */
    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasRole: boolean }>;

    /**
     * Sets the reward inverse to the uint max 2**256 - 1.
     * Called once when the colony is created to initialise certain storage slot values.
     * @param _colonyNetworkAddress Address of the colony network
     * @param _token Address of the colony ERC20 Token
     */
    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Only allowed to be called when `taskCount` is `0` by authorized addresses.
     * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
     * @param _amount Amount of reputation/tokens for every address
     * @param _users Array of address to bootstrap with reputation
     */
    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Mint `_wad` amount of colony tokens. Secured function to authorised members.
     * @param _wad Amount to mint
     */
    mintTokens(
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Register colony's ENS label.
     * @param colonyName The label to register.
     * @param orbitdb The path of the orbitDB database associated with the colony name
     */
    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
     * @param orbitdb The path of the orbitDB database to be associated with the colony
     */
    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get a domain by id.
     * @param _id Id of the domain which details to get
     * @returns domain The domain
     */
    getDomain(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
      ] & {
        domain: [BigNumber, BigNumber] & {
          skillId: BigNumber;
          fundingPotId: BigNumber;
        };
      }
    >;

    /**
     * Get the number of domains in the colony.
     * @returns count The domain count. Min 1 as the root domain is created at the same time as the colony
     */
    getDomainCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    /**
     * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
     * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
     * @param branchMask The branchmask of the proof
     * @param key The key of the element the proof is for.
     * @param siblings The siblings of the proof
     * @param value The value of the element that the proof is for.
     * @returns isValid True if the proof is valid, false otherwise.
     */
    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    /**
     * Add a new payment in the colony. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the payment belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     * @param _skillId The skill associated with the payment
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns paymentId Identifier of the newly created payment
     */
    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the recipient on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     */
    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the domain on an existing payment. Secured function to authorised members
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Id of the new domain to set
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action.
     */
    setPaymentDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the skill on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId Id of the new skill to set
     */
    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the payout for a given token on an existing payment. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns an exiting payment.
     * @param _id Payment identifier
     * @returns payment The Payment data structure
     */
    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
          recipient: string;
          finalized: boolean;
          fundingPotId: BigNumber;
          domainId: BigNumber;
          skills: BigNumber[];
        }
      ] & {
        payment: [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
          recipient: string;
          finalized: boolean;
          fundingPotId: BigNumber;
          domainId: BigNumber;
          skills: BigNumber[];
        };
      }
    >;

    /**
     * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Payment identifier
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the number of payments in the colony.
     * @returns count The payment count
     */
    getPaymentCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    /**
     * Make a new task in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the task belongs
     * @param _dueDate The due date of the task, can set to `0` for no-op
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId The skill associated with the task, can set to `0` for no-op
     * @param _specificationHash Database identifier where the task specification is stored
     */
    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the number of tasks in the colony.
     * @returns count The task count
     */
    getTaskCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    /**
     * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
     * @param _id Id of the task
     * @returns nonce The current task change nonce value
     */
    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    /**
     * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
     * @param _id Id of the task
     * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
     * @param _role Id of the role, as defined in TaskRole enum
     */
    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
     * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
     * @param _id Id of the task
     * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _salt Salt value used to generate the rating secret
     */
    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
     * @param _salt Salt value
     * @param _value Value to hide
     * @returns secret `keccak256` hash of joint _salt and _value
     */
    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { secret: string }>;

    /**
     * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
     * @param _id Id of the task
     * @returns nSecrets Number of secretslastSubmittedAt Timestamp of the last submitted rating secret
     */
    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    /**
     * Get the rating secret submitted for role `_role` in task `_id`
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @returns secret Rating secret `bytes32` value
     */
    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { secret: string }>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Id of the task
     * @param _permissionDomainId The domain ID in which _user has the Administration permission
     * @param _user Address of the user we want to give a manager role to
     */
    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a evaluator role to
     */
    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a worker role to
     */
    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Removing evaluator role. Agreed between manager and currently assigned evaluator.
     * @param _id Id of the task
     */
    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Removing worker role. Agreed between manager and currently assigned worker.
     * @param _id Id of the task
     */
    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
     * Set the skill for task `_id`.
     * @param _id Id of the task
     * @param _skillId Id of the skill which has to be a global skill
     */
    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the domain for task `_id`.
     * @param _domainId Id of the domain
     * @param _id Id of the task
     */
    setTaskDomain(
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
     * @param _id Id of the task
     * @param _specificationHash Unique hash of the task brief in ddb
     */
    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the due date on task `_id`. Allowed before a task is finalized.
     * @param _dueDate Due date as seconds since unix epoch
     * @param _id Id of the task
     */
    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
     * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     */
    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
     * Submit the task deliverable for Worker and rating for Manager.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     * @param _ratingSecret Rating secret for manager
     */
    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the `task.finalized` property to true
     * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
     * @param _id Id of the task
     */
    finalizeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the `task.status` property to `1`.
     * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
     * @param _id Id of the task
     */
    cancelTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
     * @param _id Id of the task
     */
    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get a task with id `_id`
     * @param _id Id of the task
     * @returns specificationHash Task brief hashdeliverableHash Task deliverable hashstatus TaskStatus property. 0 - Active. 1 - Cancelled. 2 - FinalizeddueDate Due datefundingPotId Id of funding pot for taskcompletionTimestamp Task completion timestampdomainId Task domain id, default is root colony domain with id 1skillIds Array of global skill ids assigned to task
     */
    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    /**
     * Get the `Role` properties back for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @returns role The Role
     */
    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, boolean, number] & {
          user: string;
          rateFail: boolean;
          rating: number;
        }
      ] & {
        role: [string, boolean, number] & {
          user: string;
          rateFail: boolean;
          rating: number;
        };
      }
    >;

    /**
     * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
     * @param _rewardInverse The inverse of the reward
     */
    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
     * @returns rewardInverse The inverse of the reward
     */
    getRewardInverse(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardInverse: BigNumber }>;

    /**
     * Get payout amount in `_token` denomination for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns amount Payout amount
     */
    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    /**
     * Set `_token` payout for manager in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set `_token` payout for evaluator in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set `_token` payout for worker in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
     * Set `_token` payout for all roles in task `_id` to the respective amounts.
     * @param _evaluatorAmount Payout amount for evaluator
     * @param _id Id of the task
     * @param _managerAmount Payout amount for manager
     * @param _token Address of the token, `0x0` value indicates Ether
     * @param _workerAmount Payout amount for worker
     */
    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
     * @param _token Address of the token used for reward payout
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
     * @param _payoutId Id of the reward payout
     * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens, `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get useful information about specific reward payout.
     * @param _payoutId Id of the reward payout
     * @returns rewardPayoutCycle RewardPayoutCycle, containing propertes:  `reputationState` Reputation root hash at the time of creation,  `colonyWideReputation` Colony wide reputation in `reputationState`,  `totalTokens` Total colony tokens at the time of creation,  `amount` Total amount of tokens taken aside for reward payout,  `tokenAddress` Token address,  `blockTimestamp` Block number at the time of creation.
     */
    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
          reputationState: string;
          colonyWideReputation: BigNumber;
          totalTokens: BigNumber;
          amount: BigNumber;
          tokenAddress: string;
          blockTimestamp: BigNumber;
        }
      ] & {
        rewardPayoutCycle: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber
        ] & {
          reputationState: string;
          colonyWideReputation: BigNumber;
          totalTokens: BigNumber;
          amount: BigNumber;
          tokenAddress: string;
          blockTimestamp: BigNumber;
        };
      }
    >;

    /**
     * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
     * @param _payoutId Id of the reward payout
     */
    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
     * Get the non-mapping properties of a pot by id.
     * @param _id Id of the pot which details to get
     * @returns associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, PayoutassociatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainIdpayoutsWeCannotMake Number of payouts that cannot be completed with the current funding
     */
    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    /**
     * Get the number of funding pots in the colony.
     * @returns count The funding pots count
     */
    getFundingPotCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    /**
     * Get the `_token` balance of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns balance Funding pot supply balance
     */
    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    /**
     * Get the assigned `_token` payouts of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns payout Funding pot payout amount
     */
    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { payout: BigNumber }>;

    /**
     * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimColonyFunds(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns amount Total amount of tokens in funding pots other than the rewards pot (id 0)
     */
    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  /**
   * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
   */
  approveExitRecovery(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
   */
  exitRecoveryMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Return number of recovery roles.
   * @returns numRoles Number of users with the recovery role.
   */
  numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * certain critical variables are protected from editing in this function
   * Update value of arbitrary storage variable. Can only be called by user with recovery role.
   * @param _slot Uint address of storage slot to be updated
   * @param _value word of data to be set
   */
  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Is colony network in recovery mode.
   * @returns inRecoveryMode Return true if recovery mode is active, false otherwise
   */
  isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

  /**
   * No return value, but should throw if protected.This is public, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
   * Check whether the supplied slot is a protected variable specific to this contract
   * @param _slot The storage slot number to check.
   */
  checkNotAdditionalProtectedVariable(
    _slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  /**
   * Remove colony recovery role. Can only be called by root role.
   * @param _user User we want to remove recovery role from
   */
  removeRecoveryRole(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set new colony recovery role. Can be called by root.
   * @param _user User we want to give a recovery role to
   */
  setRecoveryRole(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Put colony network mining into recovery mode. Can only be called by user with recovery role.
   */
  enterRecoveryMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the `ColonyAuthority` for the colony.
   * @returns colonyAuthority The `ColonyAuthority` contract address
   */
  authority(overrides?: CallOverrides): Promise<string>;

  /**
   * Used for testing.
   * Get the colony `owner` address. This should be address(0x0) at all times.
   * @returns colonyOwner Address of the colony owner
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
   * @returns colonyVersion Version number
   */
  version(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
   * Upgrades a colony to a new Colony contract version `_newVersion`.
   * @param _newVersion The target version for the upgrade
   */
  upgrade(
    _newVersion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets up the permission for those with root permission to be able to call updateColonyOrbitDB, which is new in v3Should be removed in v4, and only `finishUpgrade` should be used, introduced in v3.
   * A function to be called after an upgrade has been done from v2 to v3.
   */
  finishUpgrade2To3(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be public so it can be an external call.
   * A function to be called after an upgrade has been done from v2 to v3.
   */
  finishUpgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
   * Returns the colony network address set on the Colony.
   * @returns colonyNetwork The address of Colony Network instance
   */
  getColonyNetwork(overrides?: CallOverrides): Promise<string>;

  /**
   * Get the colony token.
   * @returns tokenAddress Address of the token contract
   */
  getToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Set new colony root role. Can be called by root role only.
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an root role to
   */
  setRootRole(
    _user: string,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set new colony arbitration role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an arbitration role to
   */
  setArbitrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set new colony architecture role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an architecture role to
   */
  setArchitectureRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set new colony funding role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an funding role to
   */
  setFundingRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set new colony admin role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an admin role to
   */
  setAdministrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
   * @param _domainId The domain where we want to check for the role
   * @param _role The role we want to check for
   * @param _user The user whose role we want to check
   * @returns hasRole Boolean indicating whether the given user has the given role in domain
   */
  hasUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Sets the reward inverse to the uint max 2**256 - 1.
   * Called once when the colony is created to initialise certain storage slot values.
   * @param _colonyNetworkAddress Address of the colony network
   * @param _token Address of the colony ERC20 Token
   */
  initialiseColony(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Only allowed to be called when `taskCount` is `0` by authorized addresses.
   * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
   * @param _amount Amount of reputation/tokens for every address
   * @param _users Array of address to bootstrap with reputation
   */
  bootstrapColony(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Mint `_wad` amount of colony tokens. Secured function to authorised members.
   * @param _wad Amount to mint
   */
  mintTokens(
    _wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Register colony's ENS label.
   * @param colonyName The label to register.
   * @param orbitdb The path of the orbitDB database associated with the colony name
   */
  registerColonyLabel(
    colonyName: string,
    orbitdb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
   * @param orbitdb The path of the orbitDB database to be associated with the colony
   */
  updateColonyOrbitDB(
    orbitdb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
   * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _parentDomainId Id of the domain under which the new one will be added
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  addDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get a domain by id.
   * @param _id Id of the domain which details to get
   * @returns domain The domain
   */
  getDomain(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
  >;

  /**
   * Get the number of domains in the colony.
   * @returns count The domain count. Min 1 as the root domain is created at the same time as the colony
   */
  getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
   * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
   * @param branchMask The branchmask of the proof
   * @param key The key of the element the proof is for.
   * @param siblings The siblings of the proof
   * @param value The value of the element that the proof is for.
   * @returns isValid True if the proof is valid, false otherwise.
   */
  verifyReputationProof(
    key: BytesLike,
    value: BytesLike,
    branchMask: BigNumberish,
    siblings: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Add a new payment in the colony. Secured function to authorised members.
   * @param _amount Payout amount
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
   * @param _domainId The domain where the payment belongs
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _recipient Address of the payment recipient
   * @param _skillId The skill associated with the payment
   * @param _token Address of the token, `0x0` value indicates Ether
   * @returns paymentId Identifier of the newly created payment
   */
  addPayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _recipient: string,
    _token: string,
    _amount: BigNumberish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  finalizePayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the recipient on an existing payment. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _recipient Address of the payment recipient
   */
  setPaymentRecipient(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the domain on an existing payment. Secured function to authorised members
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Id of the new domain to set
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action.
   */
  setPaymentDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _domainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the skill on an existing payment. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _skillId Id of the new skill to set
   */
  setPaymentSkill(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the payout for a given token on an existing payment. Secured function to authorised members.
   * @param _amount Payout amount
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setPaymentPayout(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns an exiting payment.
   * @param _id Payment identifier
   * @returns payment The Payment data structure
   */
  getPayment(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      finalized: boolean;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      skills: BigNumber[];
    }
  >;

  /**
   * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
   * @param _id Payment identifier
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  claimPayment(
    _id: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the number of payments in the colony.
   * @returns count The payment count
   */
  getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Make a new task in the colony. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId The domain where the task belongs
   * @param _dueDate The due date of the task, can set to `0` for no-op
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _skillId The skill associated with the task, can set to `0` for no-op
   * @param _specificationHash Database identifier where the task specification is stored
   */
  makeTask(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _specificationHash: BytesLike,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the number of tasks in the colony.
   * @returns count The task count
   */
  getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
   * @param _id Id of the task
   * @returns nonce The current task change nonce value
   */
  getTaskChangeNonce(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
   * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
   * @param _data The transaction data
   * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
   * @param _sigR r output of the ECDSA signature of the transaction
   * @param _sigS s output of the ECDSA signature of the transaction
   * @param _sigV recovery id
   * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
   */
  executeTaskChange(
    _sigV: BigNumberish[],
    _sigR: BytesLike[],
    _sigS: BytesLike[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
   * @param _data The transaction data
   * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
   * @param _sigR r output of the ECDSA signature of the transaction
   * @param _sigS s output of the ECDSA signature of the transaction
   * @param _sigV recovery id
   * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
   */
  executeTaskRoleAssignment(
    _sigV: BigNumberish[],
    _sigR: BytesLike[],
    _sigS: BytesLike[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
   * @param _id Id of the task
   * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
   * @param _role Id of the role, as defined in TaskRole enum
   */
  submitTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _ratingSecret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
   * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
   * @param _id Id of the task
   * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
   * @param _role Id of the role, as defined in TaskRole enum
   * @param _salt Salt value used to generate the rating secret
   */
  revealTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _rating: BigNumberish,
    _salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
   * @param _salt Salt value
   * @param _value Value to hide
   * @returns secret `keccak256` hash of joint _salt and _value
   */
  generateSecret(
    _salt: BytesLike,
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
   * @param _id Id of the task
   * @returns nSecrets Number of secretslastSubmittedAt Timestamp of the last submitted rating secret
   */
  getTaskWorkRatingSecretsInfo(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nSecrets: BigNumber; lastSubmittedAt: BigNumber }
  >;

  /**
   * Get the rating secret submitted for role `_role` in task `_id`
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   * @returns secret Rating secret `bytes32` value
   */
  getTaskWorkRatingSecret(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * This function can only be called through `executeTaskRoleAssignment`.
   * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Id of the task
   * @param _permissionDomainId The domain ID in which _user has the Administration permission
   * @param _user Address of the user we want to give a manager role to
   */
  setTaskManagerRole(
    _id: BigNumberish,
    _user: string,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called through `executeTaskRoleAssignment`.
   * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
   * @param _id Id of the task
   * @param _user Address of the user we want to give a evaluator role to
   */
  setTaskEvaluatorRole(
    _id: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called through `executeTaskRoleAssignment`.
   * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
   * @param _id Id of the task
   * @param _user Address of the user we want to give a worker role to
   */
  setTaskWorkerRole(
    _id: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Removing evaluator role. Agreed between manager and currently assigned evaluator.
   * @param _id Id of the task
   */
  removeTaskEvaluatorRole(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Removing worker role. Agreed between manager and currently assigned worker.
   * @param _id Id of the task
   */
  removeTaskWorkerRole(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
   * Set the skill for task `_id`.
   * @param _id Id of the task
   * @param _skillId Id of the skill which has to be a global skill
   */
  setTaskSkill(
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the domain for task `_id`.
   * @param _domainId Id of the domain
   * @param _id Id of the task
   */
  setTaskDomain(
    _id: BigNumberish,
    _domainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
   * @param _id Id of the task
   * @param _specificationHash Unique hash of the task brief in ddb
   */
  setTaskBrief(
    _id: BigNumberish,
    _specificationHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the due date on task `_id`. Allowed before a task is finalized.
   * @param _dueDate Due date as seconds since unix epoch
   * @param _id Id of the task
   */
  setTaskDueDate(
    _id: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
   * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
   * @param _deliverableHash Unique hash of the task deliverable content in ddb
   * @param _id Id of the task
   */
  submitTaskDeliverable(
    _id: BigNumberish,
    _deliverableHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
   * Submit the task deliverable for Worker and rating for Manager.
   * @param _deliverableHash Unique hash of the task deliverable content in ddb
   * @param _id Id of the task
   * @param _ratingSecret Rating secret for manager
   */
  submitTaskDeliverableAndRating(
    _id: BigNumberish,
    _deliverableHash: BytesLike,
    _ratingSecret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the `task.finalized` property to true
   * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
   * @param _id Id of the task
   */
  finalizeTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the `task.status` property to `1`.
   * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
   * @param _id Id of the task
   */
  cancelTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
   * @param _id Id of the task
   */
  completeTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get a task with id `_id`
   * @param _id Id of the task
   * @returns specificationHash Task brief hashdeliverableHash Task deliverable hashstatus TaskStatus property. 0 - Active. 1 - Cancelled. 2 - FinalizeddueDate Due datefundingPotId Id of funding pot for taskcompletionTimestamp Task completion timestampdomainId Task domain id, default is root colony domain with id 1skillIds Array of global skill ids assigned to task
   */
  getTask(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
    }
  >;

  /**
   * Get the `Role` properties back for role `_role` in task `_id`.
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   * @returns role The Role
   */
  getTaskRole(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, number] & {
      user: string;
      rateFail: boolean;
      rating: number;
    }
  >;

  /**
   * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
   * @param _rewardInverse The inverse of the reward
   */
  setRewardInverse(
    _rewardInverse: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
   * @returns rewardInverse The inverse of the reward
   */
  getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get payout amount in `_token` denomination for role `_role` in task `_id`.
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   * @param _token Address of the token, `0x0` value indicates Ether
   * @returns amount Payout amount
   */
  getTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Set `_token` payout for manager in task `_id` to `_amount`.
   * @param _amount Payout amount
   * @param _id Id of the task
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setTaskManagerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set `_token` payout for evaluator in task `_id` to `_amount`.
   * @param _amount Payout amount
   * @param _id Id of the task
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setTaskEvaluatorPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set `_token` payout for worker in task `_id` to `_amount`.
   * @param _amount Payout amount
   * @param _id Id of the task
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setTaskWorkerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
   * Set `_token` payout for all roles in task `_id` to the respective amounts.
   * @param _evaluatorAmount Payout amount for evaluator
   * @param _id Id of the task
   * @param _managerAmount Payout amount for manager
   * @param _token Address of the token, `0x0` value indicates Ether
   * @param _workerAmount Payout amount for worker
   */
  setAllTaskPayouts(
    _id: BigNumberish,
    _token: string,
    _managerAmount: BigNumberish,
    _evaluatorAmount: BigNumberish,
    _workerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  claimTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
   * @param _token Address of the token used for reward payout
   * @param branchMask The branchmask of the proof
   * @param key Some Reputation hash tree key
   * @param siblings The siblings of the proof
   * @param value Reputation value
   */
  startNextRewardPayout(
    _token: string,
    key: BytesLike,
    value: BytesLike,
    branchMask: BigNumberish,
    siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
   * @param _payoutId Id of the reward payout
   * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens, `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
   * @param branchMask The branchmask of the proof
   * @param key Some Reputation hash tree key
   * @param siblings The siblings of the proof
   * @param value Reputation value
   */
  claimRewardPayout(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: BytesLike,
    value: BytesLike,
    branchMask: BigNumberish,
    siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get useful information about specific reward payout.
   * @param _payoutId Id of the reward payout
   * @returns rewardPayoutCycle RewardPayoutCycle, containing propertes:  `reputationState` Reputation root hash at the time of creation,  `colonyWideReputation` Colony wide reputation in `reputationState`,  `totalTokens` Total colony tokens at the time of creation,  `amount` Total amount of tokens taken aside for reward payout,  `tokenAddress` Token address,  `blockTimestamp` Block number at the time of creation.
   */
  getRewardPayoutInfo(
    _payoutId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      reputationState: string;
      colonyWideReputation: BigNumber;
      totalTokens: BigNumber;
      amount: BigNumber;
      tokenAddress: string;
      blockTimestamp: BigNumber;
    }
  >;

  /**
   * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
   * @param _payoutId Id of the reward payout
   */
  finalizeRewardPayout(
    _payoutId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
   * Get the non-mapping properties of a pot by id.
   * @param _id Id of the pot which details to get
   * @returns associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, PayoutassociatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainIdpayoutsWeCannotMake Number of payouts that cannot be completed with the current funding
   */
  getFundingPot(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
    }
  >;

  /**
   * Get the number of funding pots in the colony.
   * @returns count The funding pots count
   */
  getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the `_token` balance of pot with id `_potId`.
   * @param _potId Id of the funding pot
   * @param _token Address of the token, `0x0` value indicates Ether
   * @returns balance Funding pot supply balance
   */
  getFundingPotBalance(
    _potId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Get the assigned `_token` payouts of pot with id `_potId`.
   * @param _potId Id of the funding pot
   * @param _token Address of the token, `0x0` value indicates Ether
   * @returns payout Funding pot payout amount
   */
  getFundingPotPayout(
    _potId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
   * @param _amount Amount of funds
   * @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`
   * @param _fromPot Funding pot id providing the funds
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`
   * @param _toPot Funding pot id receiving the funds
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  moveFundsBetweenPots(
    _permissionDomainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  claimColonyFunds(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
   * @param _token Address of the token, `0x0` value indicates Ether
   * @returns amount Total amount of tokens in funding pots other than the rewards pot (id 0)
   */
  getNonRewardPotsTotal(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    /**
     * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
     */
    approveExitRecovery(overrides?: CallOverrides): Promise<void>;

    /**
     * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
     */
    exitRecoveryMode(overrides?: CallOverrides): Promise<void>;

    /**
     * Return number of recovery roles.
     * @returns numRoles Number of users with the recovery role.
     */
    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * certain critical variables are protected from editing in this function
     * Update value of arbitrary storage variable. Can only be called by user with recovery role.
     * @param _slot Uint address of storage slot to be updated
     * @param _value word of data to be set
     */
    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Is colony network in recovery mode.
     * @returns inRecoveryMode Return true if recovery mode is active, false otherwise
     */
    isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

    /**
     * No return value, but should throw if protected.This is public, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
     * Check whether the supplied slot is a protected variable specific to this contract
     * @param _slot The storage slot number to check.
     */
    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Remove colony recovery role. Can only be called by root role.
     * @param _user User we want to remove recovery role from
     */
    removeRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Set new colony recovery role. Can be called by root.
     * @param _user User we want to give a recovery role to
     */
    setRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Put colony network mining into recovery mode. Can only be called by user with recovery role.
     */
    enterRecoveryMode(overrides?: CallOverrides): Promise<void>;

    /**
     * Get the `ColonyAuthority` for the colony.
     * @returns colonyAuthority The `ColonyAuthority` contract address
     */
    authority(overrides?: CallOverrides): Promise<string>;

    /**
     * Used for testing.
     * Get the colony `owner` address. This should be address(0x0) at all times.
     * @returns colonyOwner Address of the colony owner
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
     * @returns colonyVersion Version number
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
     * Upgrades a colony to a new Colony contract version `_newVersion`.
     * @param _newVersion The target version for the upgrade
     */
    upgrade(
      _newVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets up the permission for those with root permission to be able to call updateColonyOrbitDB, which is new in v3Should be removed in v4, and only `finishUpgrade` should be used, introduced in v3.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade2To3(overrides?: CallOverrides): Promise<void>;

    /**
     * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be public so it can be an external call.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade(overrides?: CallOverrides): Promise<void>;

    /**
     * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
     * Returns the colony network address set on the Colony.
     * @returns colonyNetwork The address of Colony Network instance
     */
    getColonyNetwork(overrides?: CallOverrides): Promise<string>;

    /**
     * Get the colony token.
     * @returns tokenAddress Address of the token contract
     */
    getToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Set new colony root role. Can be called by root role only.
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an root role to
     */
    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set new colony arbitration role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an arbitration role to
     */
    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set new colony architecture role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an architecture role to
     */
    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set new colony funding role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an funding role to
     */
    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set new colony admin role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an admin role to
     */
    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
     * @param _domainId The domain where we want to check for the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     * @returns hasRole Boolean indicating whether the given user has the given role in domain
     */
    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Sets the reward inverse to the uint max 2**256 - 1.
     * Called once when the colony is created to initialise certain storage slot values.
     * @param _colonyNetworkAddress Address of the colony network
     * @param _token Address of the colony ERC20 Token
     */
    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Only allowed to be called when `taskCount` is `0` by authorized addresses.
     * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
     * @param _amount Amount of reputation/tokens for every address
     * @param _users Array of address to bootstrap with reputation
     */
    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Mint `_wad` amount of colony tokens. Secured function to authorised members.
     * @param _wad Amount to mint
     */
    mintTokens(_wad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Register colony's ENS label.
     * @param colonyName The label to register.
     * @param orbitdb The path of the orbitDB database associated with the colony name
     */
    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
     * @param orbitdb The path of the orbitDB database to be associated with the colony
     */
    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get a domain by id.
     * @param _id Id of the domain which details to get
     * @returns domain The domain
     */
    getDomain(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
    >;

    /**
     * Get the number of domains in the colony.
     * @returns count The domain count. Min 1 as the root domain is created at the same time as the colony
     */
    getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
     * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
     * @param branchMask The branchmask of the proof
     * @param key The key of the element the proof is for.
     * @param siblings The siblings of the proof
     * @param value The value of the element that the proof is for.
     * @returns isValid True if the proof is valid, false otherwise.
     */
    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Add a new payment in the colony. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the payment belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     * @param _skillId The skill associated with the payment
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns paymentId Identifier of the newly created payment
     */
    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets the recipient on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     */
    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets the domain on an existing payment. Secured function to authorised members
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Id of the new domain to set
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action.
     */
    setPaymentDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets the skill on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId Id of the new skill to set
     */
    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets the payout for a given token on an existing payment. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns an exiting payment.
     * @param _id Payment identifier
     * @returns payment The Payment data structure
     */
    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        skills: BigNumber[];
      }
    >;

    /**
     * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Payment identifier
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the number of payments in the colony.
     * @returns count The payment count
     */
    getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Make a new task in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the task belongs
     * @param _dueDate The due date of the task, can set to `0` for no-op
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId The skill associated with the task, can set to `0` for no-op
     * @param _specificationHash Database identifier where the task specification is stored
     */
    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the number of tasks in the colony.
     * @returns count The task count
     */
    getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
     * @param _id Id of the task
     * @returns nonce The current task change nonce value
     */
    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
     * @param _id Id of the task
     * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
     * @param _role Id of the role, as defined in TaskRole enum
     */
    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
     * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
     * @param _id Id of the task
     * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _salt Salt value used to generate the rating secret
     */
    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
     * @param _salt Salt value
     * @param _value Value to hide
     * @returns secret `keccak256` hash of joint _salt and _value
     */
    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
     * @param _id Id of the task
     * @returns nSecrets Number of secretslastSubmittedAt Timestamp of the last submitted rating secret
     */
    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    /**
     * Get the rating secret submitted for role `_role` in task `_id`
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @returns secret Rating secret `bytes32` value
     */
    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Id of the task
     * @param _permissionDomainId The domain ID in which _user has the Administration permission
     * @param _user Address of the user we want to give a manager role to
     */
    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a evaluator role to
     */
    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a worker role to
     */
    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Removing evaluator role. Agreed between manager and currently assigned evaluator.
     * @param _id Id of the task
     */
    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Removing worker role. Agreed between manager and currently assigned worker.
     * @param _id Id of the task
     */
    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
     * Set the skill for task `_id`.
     * @param _id Id of the task
     * @param _skillId Id of the skill which has to be a global skill
     */
    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set the domain for task `_id`.
     * @param _domainId Id of the domain
     * @param _id Id of the task
     */
    setTaskDomain(
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
     * @param _id Id of the task
     * @param _specificationHash Unique hash of the task brief in ddb
     */
    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set the due date on task `_id`. Allowed before a task is finalized.
     * @param _dueDate Due date as seconds since unix epoch
     * @param _id Id of the task
     */
    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
     * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     */
    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
     * Submit the task deliverable for Worker and rating for Manager.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     * @param _ratingSecret Rating secret for manager
     */
    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set the `task.finalized` property to true
     * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
     * @param _id Id of the task
     */
    finalizeTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Set the `task.status` property to `1`.
     * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
     * @param _id Id of the task
     */
    cancelTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
     * @param _id Id of the task
     */
    completeTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Get a task with id `_id`
     * @param _id Id of the task
     * @returns specificationHash Task brief hashdeliverableHash Task deliverable hashstatus TaskStatus property. 0 - Active. 1 - Cancelled. 2 - FinalizeddueDate Due datefundingPotId Id of funding pot for taskcompletionTimestamp Task completion timestampdomainId Task domain id, default is root colony domain with id 1skillIds Array of global skill ids assigned to task
     */
    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    /**
     * Get the `Role` properties back for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @returns role The Role
     */
    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, number] & {
        user: string;
        rateFail: boolean;
        rating: number;
      }
    >;

    /**
     * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
     * @param _rewardInverse The inverse of the reward
     */
    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
     * @returns rewardInverse The inverse of the reward
     */
    getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get payout amount in `_token` denomination for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns amount Payout amount
     */
    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for manager in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set `_token` payout for evaluator in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set `_token` payout for worker in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
     * Set `_token` payout for all roles in task `_id` to the respective amounts.
     * @param _evaluatorAmount Payout amount for evaluator
     * @param _id Id of the task
     * @param _managerAmount Payout amount for manager
     * @param _token Address of the token, `0x0` value indicates Ether
     * @param _workerAmount Payout amount for worker
     */
    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
     * @param _token Address of the token used for reward payout
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
     * @param _payoutId Id of the reward payout
     * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens, `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get useful information about specific reward payout.
     * @param _payoutId Id of the reward payout
     * @returns rewardPayoutCycle RewardPayoutCycle, containing propertes:  `reputationState` Reputation root hash at the time of creation,  `colonyWideReputation` Colony wide reputation in `reputationState`,  `totalTokens` Total colony tokens at the time of creation,  `amount` Total amount of tokens taken aside for reward payout,  `tokenAddress` Token address,  `blockTimestamp` Block number at the time of creation.
     */
    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        reputationState: string;
        colonyWideReputation: BigNumber;
        totalTokens: BigNumber;
        amount: BigNumber;
        tokenAddress: string;
        blockTimestamp: BigNumber;
      }
    >;

    /**
     * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
     * @param _payoutId Id of the reward payout
     */
    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
     * Get the non-mapping properties of a pot by id.
     * @param _id Id of the pot which details to get
     * @returns associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, PayoutassociatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainIdpayoutsWeCannotMake Number of payouts that cannot be completed with the current funding
     */
    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    /**
     * Get the number of funding pots in the colony.
     * @returns count The funding pots count
     */
    getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the `_token` balance of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns balance Funding pot supply balance
     */
    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the assigned `_token` payouts of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns payout Funding pot payout amount
     */
    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimColonyFunds(_token: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns amount Total amount of tokens in funding pots other than the rewards pot (id 0)
     */
    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ColonyInitialised(address,address)"(
      colonyNetwork?: null,
      token?: null
    ): ColonyInitialisedEventFilter;
    ColonyInitialised(
      colonyNetwork?: null,
      token?: null
    ): ColonyInitialisedEventFilter;

    "ColonyBootstrapped(address[],int256[])"(
      users?: null,
      amounts?: null
    ): ColonyBootstrappedEventFilter;
    ColonyBootstrapped(
      users?: null,
      amounts?: null
    ): ColonyBootstrappedEventFilter;

    "ColonyUpgraded(uint256,uint256)"(
      oldVersion?: null,
      newVersion?: null
    ): ColonyUpgradedEventFilter;
    ColonyUpgraded(
      oldVersion?: null,
      newVersion?: null
    ): ColonyUpgradedEventFilter;

    "ColonyRoleSet(address,uint256,uint8,bool)"(
      user?: string | null,
      domainId?: BigNumberish | null,
      role?: BigNumberish | null,
      setTo?: null
    ): ColonyRoleSetEventFilter;
    ColonyRoleSet(
      user?: string | null,
      domainId?: BigNumberish | null,
      role?: BigNumberish | null,
      setTo?: null
    ): ColonyRoleSetEventFilter;

    "ColonyFundsMovedBetweenFundingPots(uint256,uint256,uint256,address)"(
      fromPot?: BigNumberish | null,
      toPot?: BigNumberish | null,
      amount?: null,
      token?: null
    ): ColonyFundsMovedBetweenFundingPotsEventFilter;
    ColonyFundsMovedBetweenFundingPots(
      fromPot?: BigNumberish | null,
      toPot?: BigNumberish | null,
      amount?: null,
      token?: null
    ): ColonyFundsMovedBetweenFundingPotsEventFilter;

    "ColonyFundsClaimed(address,uint256,uint256)"(
      token?: null,
      fee?: null,
      payoutRemainder?: null
    ): ColonyFundsClaimedEventFilter;
    ColonyFundsClaimed(
      token?: null,
      fee?: null,
      payoutRemainder?: null
    ): ColonyFundsClaimedEventFilter;

    "RewardPayoutCycleStarted(uint256)"(
      rewardPayoutId?: null
    ): RewardPayoutCycleStartedEventFilter;
    RewardPayoutCycleStarted(
      rewardPayoutId?: null
    ): RewardPayoutCycleStartedEventFilter;

    "RewardPayoutCycleEnded(uint256)"(
      rewardPayoutId?: null
    ): RewardPayoutCycleEndedEventFilter;
    RewardPayoutCycleEnded(
      rewardPayoutId?: null
    ): RewardPayoutCycleEndedEventFilter;

    "RewardPayoutClaimed(uint256,address,uint256,uint256)"(
      rewardPayoutId?: null,
      user?: null,
      fee?: null,
      rewardRemainder?: null
    ): RewardPayoutClaimedEventFilter;
    RewardPayoutClaimed(
      rewardPayoutId?: null,
      user?: null,
      fee?: null,
      rewardRemainder?: null
    ): RewardPayoutClaimedEventFilter;

    "ColonyRewardInverseSet(uint256)"(
      rewardInverse?: null
    ): ColonyRewardInverseSetEventFilter;
    ColonyRewardInverseSet(
      rewardInverse?: null
    ): ColonyRewardInverseSetEventFilter;

    "PaymentAdded(uint256)"(paymentId?: null): PaymentAddedEventFilter;
    PaymentAdded(paymentId?: null): PaymentAddedEventFilter;

    "TaskAdded(uint256)"(taskId?: null): TaskAddedEventFilter;
    TaskAdded(taskId?: null): TaskAddedEventFilter;

    "TaskBriefSet(uint256,bytes32)"(
      taskId?: BigNumberish | null,
      specificationHash?: null
    ): TaskBriefSetEventFilter;
    TaskBriefSet(
      taskId?: BigNumberish | null,
      specificationHash?: null
    ): TaskBriefSetEventFilter;

    "TaskDueDateSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      dueDate?: null
    ): TaskDueDateSetEventFilter;
    TaskDueDateSet(
      taskId?: BigNumberish | null,
      dueDate?: null
    ): TaskDueDateSetEventFilter;

    "TaskDomainSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      domainId?: BigNumberish | null
    ): TaskDomainSetEventFilter;
    TaskDomainSet(
      taskId?: BigNumberish | null,
      domainId?: BigNumberish | null
    ): TaskDomainSetEventFilter;

    "TaskSkillSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): TaskSkillSetEventFilter;
    TaskSkillSet(
      taskId?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): TaskSkillSetEventFilter;

    "TaskRoleUserSet(uint256,uint8,address)"(
      taskId?: BigNumberish | null,
      role?: null,
      user?: string | null
    ): TaskRoleUserSetEventFilter;
    TaskRoleUserSet(
      taskId?: BigNumberish | null,
      role?: null,
      user?: string | null
    ): TaskRoleUserSetEventFilter;

    "TaskPayoutSet(uint256,uint8,address,uint256)"(
      taskId?: BigNumberish | null,
      role?: null,
      token?: null,
      amount?: null
    ): TaskPayoutSetEventFilter;
    TaskPayoutSet(
      taskId?: BigNumberish | null,
      role?: null,
      token?: null,
      amount?: null
    ): TaskPayoutSetEventFilter;

    "TaskDeliverableSubmitted(uint256,bytes32)"(
      taskId?: BigNumberish | null,
      deliverableHash?: null
    ): TaskDeliverableSubmittedEventFilter;
    TaskDeliverableSubmitted(
      taskId?: BigNumberish | null,
      deliverableHash?: null
    ): TaskDeliverableSubmittedEventFilter;

    "TaskCompleted(uint256)"(
      taskId?: BigNumberish | null
    ): TaskCompletedEventFilter;
    TaskCompleted(taskId?: BigNumberish | null): TaskCompletedEventFilter;

    "TaskWorkRatingRevealed(uint256,uint8,uint8)"(
      taskId?: BigNumberish | null,
      role?: null,
      rating?: null
    ): TaskWorkRatingRevealedEventFilter;
    TaskWorkRatingRevealed(
      taskId?: BigNumberish | null,
      role?: null,
      rating?: null
    ): TaskWorkRatingRevealedEventFilter;

    "TaskFinalized(uint256)"(
      taskId?: BigNumberish | null
    ): TaskFinalizedEventFilter;
    TaskFinalized(taskId?: BigNumberish | null): TaskFinalizedEventFilter;

    "PayoutClaimed(uint256,address,uint256)"(
      fundingPotId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PayoutClaimedEventFilter;
    PayoutClaimed(
      fundingPotId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PayoutClaimedEventFilter;

    "TaskCanceled(uint256)"(
      taskId?: BigNumberish | null
    ): TaskCanceledEventFilter;
    TaskCanceled(taskId?: BigNumberish | null): TaskCanceledEventFilter;

    "DomainAdded(uint256)"(domainId?: null): DomainAddedEventFilter;
    DomainAdded(domainId?: null): DomainAddedEventFilter;

    "FundingPotAdded(uint256)"(fundingPotId?: null): FundingPotAddedEventFilter;
    FundingPotAdded(fundingPotId?: null): FundingPotAddedEventFilter;
  };

  estimateGas: {
    /**
     * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
     */
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
     */
    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Return number of recovery roles.
     * @returns numRoles Number of users with the recovery role.
     */
    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * certain critical variables are protected from editing in this function
     * Update value of arbitrary storage variable. Can only be called by user with recovery role.
     * @param _slot Uint address of storage slot to be updated
     * @param _value word of data to be set
     */
    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Is colony network in recovery mode.
     * @returns inRecoveryMode Return true if recovery mode is active, false otherwise
     */
    isInRecoveryMode(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * No return value, but should throw if protected.This is public, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
     * Check whether the supplied slot is a protected variable specific to this contract
     * @param _slot The storage slot number to check.
     */
    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Remove colony recovery role. Can only be called by root role.
     * @param _user User we want to remove recovery role from
     */
    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set new colony recovery role. Can be called by root.
     * @param _user User we want to give a recovery role to
     */
    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Put colony network mining into recovery mode. Can only be called by user with recovery role.
     */
    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the `ColonyAuthority` for the colony.
     * @returns colonyAuthority The `ColonyAuthority` contract address
     */
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Used for testing.
     * Get the colony `owner` address. This should be address(0x0) at all times.
     * @returns colonyOwner Address of the colony owner
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
     * @returns colonyVersion Version number
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
     * Upgrades a colony to a new Colony contract version `_newVersion`.
     * @param _newVersion The target version for the upgrade
     */
    upgrade(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets up the permission for those with root permission to be able to call updateColonyOrbitDB, which is new in v3Should be removed in v4, and only `finishUpgrade` should be used, introduced in v3.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade2To3(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be public so it can be an external call.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
     * Returns the colony network address set on the Colony.
     * @returns colonyNetwork The address of Colony Network instance
     */
    getColonyNetwork(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the colony token.
     * @returns tokenAddress Address of the token contract
     */
    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Set new colony root role. Can be called by root role only.
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an root role to
     */
    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set new colony arbitration role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an arbitration role to
     */
    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set new colony architecture role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an architecture role to
     */
    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set new colony funding role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an funding role to
     */
    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set new colony admin role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an admin role to
     */
    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
     * @param _domainId The domain where we want to check for the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     * @returns hasRole Boolean indicating whether the given user has the given role in domain
     */
    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the reward inverse to the uint max 2**256 - 1.
     * Called once when the colony is created to initialise certain storage slot values.
     * @param _colonyNetworkAddress Address of the colony network
     * @param _token Address of the colony ERC20 Token
     */
    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Only allowed to be called when `taskCount` is `0` by authorized addresses.
     * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
     * @param _amount Amount of reputation/tokens for every address
     * @param _users Array of address to bootstrap with reputation
     */
    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Mint `_wad` amount of colony tokens. Secured function to authorised members.
     * @param _wad Amount to mint
     */
    mintTokens(
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Register colony's ENS label.
     * @param colonyName The label to register.
     * @param orbitdb The path of the orbitDB database associated with the colony name
     */
    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
     * @param orbitdb The path of the orbitDB database to be associated with the colony
     */
    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get a domain by id.
     * @param _id Id of the domain which details to get
     * @returns domain The domain
     */
    getDomain(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the number of domains in the colony.
     * @returns count The domain count. Min 1 as the root domain is created at the same time as the colony
     */
    getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
     * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
     * @param branchMask The branchmask of the proof
     * @param key The key of the element the proof is for.
     * @param siblings The siblings of the proof
     * @param value The value of the element that the proof is for.
     * @returns isValid True if the proof is valid, false otherwise.
     */
    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Add a new payment in the colony. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the payment belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     * @param _skillId The skill associated with the payment
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns paymentId Identifier of the newly created payment
     */
    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the recipient on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     */
    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the domain on an existing payment. Secured function to authorised members
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Id of the new domain to set
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action.
     */
    setPaymentDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the skill on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId Id of the new skill to set
     */
    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the payout for a given token on an existing payment. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns an exiting payment.
     * @param _id Payment identifier
     * @returns payment The Payment data structure
     */
    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Payment identifier
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the number of payments in the colony.
     * @returns count The payment count
     */
    getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Make a new task in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the task belongs
     * @param _dueDate The due date of the task, can set to `0` for no-op
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId The skill associated with the task, can set to `0` for no-op
     * @param _specificationHash Database identifier where the task specification is stored
     */
    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the number of tasks in the colony.
     * @returns count The task count
     */
    getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
     * @param _id Id of the task
     * @returns nonce The current task change nonce value
     */
    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
     * @param _id Id of the task
     * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
     * @param _role Id of the role, as defined in TaskRole enum
     */
    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
     * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
     * @param _id Id of the task
     * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _salt Salt value used to generate the rating secret
     */
    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
     * @param _salt Salt value
     * @param _value Value to hide
     * @returns secret `keccak256` hash of joint _salt and _value
     */
    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
     * @param _id Id of the task
     * @returns nSecrets Number of secretslastSubmittedAt Timestamp of the last submitted rating secret
     */
    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the rating secret submitted for role `_role` in task `_id`
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @returns secret Rating secret `bytes32` value
     */
    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Id of the task
     * @param _permissionDomainId The domain ID in which _user has the Administration permission
     * @param _user Address of the user we want to give a manager role to
     */
    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a evaluator role to
     */
    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a worker role to
     */
    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Removing evaluator role. Agreed between manager and currently assigned evaluator.
     * @param _id Id of the task
     */
    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Removing worker role. Agreed between manager and currently assigned worker.
     * @param _id Id of the task
     */
    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
     * Set the skill for task `_id`.
     * @param _id Id of the task
     * @param _skillId Id of the skill which has to be a global skill
     */
    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the domain for task `_id`.
     * @param _domainId Id of the domain
     * @param _id Id of the task
     */
    setTaskDomain(
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
     * @param _id Id of the task
     * @param _specificationHash Unique hash of the task brief in ddb
     */
    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the due date on task `_id`. Allowed before a task is finalized.
     * @param _dueDate Due date as seconds since unix epoch
     * @param _id Id of the task
     */
    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
     * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     */
    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
     * Submit the task deliverable for Worker and rating for Manager.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     * @param _ratingSecret Rating secret for manager
     */
    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the `task.finalized` property to true
     * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
     * @param _id Id of the task
     */
    finalizeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the `task.status` property to `1`.
     * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
     * @param _id Id of the task
     */
    cancelTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
     * @param _id Id of the task
     */
    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get a task with id `_id`
     * @param _id Id of the task
     * @returns specificationHash Task brief hashdeliverableHash Task deliverable hashstatus TaskStatus property. 0 - Active. 1 - Cancelled. 2 - FinalizeddueDate Due datefundingPotId Id of funding pot for taskcompletionTimestamp Task completion timestampdomainId Task domain id, default is root colony domain with id 1skillIds Array of global skill ids assigned to task
     */
    getTask(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the `Role` properties back for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @returns role The Role
     */
    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
     * @param _rewardInverse The inverse of the reward
     */
    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
     * @returns rewardInverse The inverse of the reward
     */
    getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get payout amount in `_token` denomination for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns amount Payout amount
     */
    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for manager in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for evaluator in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for worker in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
     * Set `_token` payout for all roles in task `_id` to the respective amounts.
     * @param _evaluatorAmount Payout amount for evaluator
     * @param _id Id of the task
     * @param _managerAmount Payout amount for manager
     * @param _token Address of the token, `0x0` value indicates Ether
     * @param _workerAmount Payout amount for worker
     */
    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
     * @param _token Address of the token used for reward payout
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
     * @param _payoutId Id of the reward payout
     * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens, `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get useful information about specific reward payout.
     * @param _payoutId Id of the reward payout
     * @returns rewardPayoutCycle RewardPayoutCycle, containing propertes:  `reputationState` Reputation root hash at the time of creation,  `colonyWideReputation` Colony wide reputation in `reputationState`,  `totalTokens` Total colony tokens at the time of creation,  `amount` Total amount of tokens taken aside for reward payout,  `tokenAddress` Token address,  `blockTimestamp` Block number at the time of creation.
     */
    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
     * @param _payoutId Id of the reward payout
     */
    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
     * Get the non-mapping properties of a pot by id.
     * @param _id Id of the pot which details to get
     * @returns associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, PayoutassociatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainIdpayoutsWeCannotMake Number of payouts that cannot be completed with the current funding
     */
    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of funding pots in the colony.
     * @returns count The funding pots count
     */
    getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the `_token` balance of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns balance Funding pot supply balance
     */
    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the assigned `_token` payouts of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns payout Funding pot payout amount
     */
    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimColonyFunds(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns amount Total amount of tokens in funding pots other than the rewards pot (id 0)
     */
    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
     */
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
     */
    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Return number of recovery roles.
     * @returns numRoles Number of users with the recovery role.
     */
    numRecoveryRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * certain critical variables are protected from editing in this function
     * Update value of arbitrary storage variable. Can only be called by user with recovery role.
     * @param _slot Uint address of storage slot to be updated
     * @param _value word of data to be set
     */
    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Is colony network in recovery mode.
     * @returns inRecoveryMode Return true if recovery mode is active, false otherwise
     */
    isInRecoveryMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * No return value, but should throw if protected.This is public, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
     * Check whether the supplied slot is a protected variable specific to this contract
     * @param _slot The storage slot number to check.
     */
    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Remove colony recovery role. Can only be called by root role.
     * @param _user User we want to remove recovery role from
     */
    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set new colony recovery role. Can be called by root.
     * @param _user User we want to give a recovery role to
     */
    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Put colony network mining into recovery mode. Can only be called by user with recovery role.
     */
    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the `ColonyAuthority` for the colony.
     * @returns colonyAuthority The `ColonyAuthority` contract address
     */
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Used for testing.
     * Get the colony `owner` address. This should be address(0x0) at all times.
     * @returns colonyOwner Address of the colony owner
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
     * @returns colonyVersion Version number
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
     * Upgrades a colony to a new Colony contract version `_newVersion`.
     * @param _newVersion The target version for the upgrade
     */
    upgrade(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets up the permission for those with root permission to be able to call updateColonyOrbitDB, which is new in v3Should be removed in v4, and only `finishUpgrade` should be used, introduced in v3.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade2To3(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be public so it can be an external call.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
     * Returns the colony network address set on the Colony.
     * @returns colonyNetwork The address of Colony Network instance
     */
    getColonyNetwork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the colony token.
     * @returns tokenAddress Address of the token contract
     */
    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Set new colony root role. Can be called by root role only.
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an root role to
     */
    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set new colony arbitration role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an arbitration role to
     */
    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set new colony architecture role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an architecture role to
     */
    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set new colony funding role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an funding role to
     */
    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set new colony admin role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an admin role to
     */
    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
     * @param _domainId The domain where we want to check for the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     * @returns hasRole Boolean indicating whether the given user has the given role in domain
     */
    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the reward inverse to the uint max 2**256 - 1.
     * Called once when the colony is created to initialise certain storage slot values.
     * @param _colonyNetworkAddress Address of the colony network
     * @param _token Address of the colony ERC20 Token
     */
    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Only allowed to be called when `taskCount` is `0` by authorized addresses.
     * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
     * @param _amount Amount of reputation/tokens for every address
     * @param _users Array of address to bootstrap with reputation
     */
    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Mint `_wad` amount of colony tokens. Secured function to authorised members.
     * @param _wad Amount to mint
     */
    mintTokens(
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Register colony's ENS label.
     * @param colonyName The label to register.
     * @param orbitdb The path of the orbitDB database associated with the colony name
     */
    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
     * @param orbitdb The path of the orbitDB database to be associated with the colony
     */
    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get a domain by id.
     * @param _id Id of the domain which details to get
     * @returns domain The domain
     */
    getDomain(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the number of domains in the colony.
     * @returns count The domain count. Min 1 as the root domain is created at the same time as the colony
     */
    getDomainCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
     * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
     * @param branchMask The branchmask of the proof
     * @param key The key of the element the proof is for.
     * @param siblings The siblings of the proof
     * @param value The value of the element that the proof is for.
     * @returns isValid True if the proof is valid, false otherwise.
     */
    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Add a new payment in the colony. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the payment belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     * @param _skillId The skill associated with the payment
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns paymentId Identifier of the newly created payment
     */
    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the recipient on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     */
    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the domain on an existing payment. Secured function to authorised members
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Id of the new domain to set
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action.
     */
    setPaymentDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the skill on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId Id of the new skill to set
     */
    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the payout for a given token on an existing payment. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns an exiting payment.
     * @param _id Payment identifier
     * @returns payment The Payment data structure
     */
    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Payment identifier
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the number of payments in the colony.
     * @returns count The payment count
     */
    getPaymentCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Make a new task in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the task belongs
     * @param _dueDate The due date of the task, can set to `0` for no-op
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId The skill associated with the task, can set to `0` for no-op
     * @param _specificationHash Database identifier where the task specification is stored
     */
    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the number of tasks in the colony.
     * @returns count The task count
     */
    getTaskCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
     * @param _id Id of the task
     * @returns nonce The current task change nonce value
     */
    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
     * @param _id Id of the task
     * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
     * @param _role Id of the role, as defined in TaskRole enum
     */
    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
     * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
     * @param _id Id of the task
     * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _salt Salt value used to generate the rating secret
     */
    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
     * @param _salt Salt value
     * @param _value Value to hide
     * @returns secret `keccak256` hash of joint _salt and _value
     */
    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
     * @param _id Id of the task
     * @returns nSecrets Number of secretslastSubmittedAt Timestamp of the last submitted rating secret
     */
    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the rating secret submitted for role `_role` in task `_id`
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @returns secret Rating secret `bytes32` value
     */
    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Id of the task
     * @param _permissionDomainId The domain ID in which _user has the Administration permission
     * @param _user Address of the user we want to give a manager role to
     */
    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a evaluator role to
     */
    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a worker role to
     */
    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Removing evaluator role. Agreed between manager and currently assigned evaluator.
     * @param _id Id of the task
     */
    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Removing worker role. Agreed between manager and currently assigned worker.
     * @param _id Id of the task
     */
    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
     * Set the skill for task `_id`.
     * @param _id Id of the task
     * @param _skillId Id of the skill which has to be a global skill
     */
    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the domain for task `_id`.
     * @param _domainId Id of the domain
     * @param _id Id of the task
     */
    setTaskDomain(
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
     * @param _id Id of the task
     * @param _specificationHash Unique hash of the task brief in ddb
     */
    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the due date on task `_id`. Allowed before a task is finalized.
     * @param _dueDate Due date as seconds since unix epoch
     * @param _id Id of the task
     */
    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
     * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     */
    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
     * Submit the task deliverable for Worker and rating for Manager.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     * @param _ratingSecret Rating secret for manager
     */
    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the `task.finalized` property to true
     * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
     * @param _id Id of the task
     */
    finalizeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the `task.status` property to `1`.
     * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
     * @param _id Id of the task
     */
    cancelTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
     * @param _id Id of the task
     */
    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get a task with id `_id`
     * @param _id Id of the task
     * @returns specificationHash Task brief hashdeliverableHash Task deliverable hashstatus TaskStatus property. 0 - Active. 1 - Cancelled. 2 - FinalizeddueDate Due datefundingPotId Id of funding pot for taskcompletionTimestamp Task completion timestampdomainId Task domain id, default is root colony domain with id 1skillIds Array of global skill ids assigned to task
     */
    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the `Role` properties back for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @returns role The Role
     */
    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
     * @param _rewardInverse The inverse of the reward
     */
    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
     * @returns rewardInverse The inverse of the reward
     */
    getRewardInverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get payout amount in `_token` denomination for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns amount Payout amount
     */
    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Set `_token` payout for manager in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set `_token` payout for evaluator in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set `_token` payout for worker in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
     * Set `_token` payout for all roles in task `_id` to the respective amounts.
     * @param _evaluatorAmount Payout amount for evaluator
     * @param _id Id of the task
     * @param _managerAmount Payout amount for manager
     * @param _token Address of the token, `0x0` value indicates Ether
     * @param _workerAmount Payout amount for worker
     */
    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
     * @param _token Address of the token used for reward payout
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
     * @param _payoutId Id of the reward payout
     * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens, `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get useful information about specific reward payout.
     * @param _payoutId Id of the reward payout
     * @returns rewardPayoutCycle RewardPayoutCycle, containing propertes:  `reputationState` Reputation root hash at the time of creation,  `colonyWideReputation` Colony wide reputation in `reputationState`,  `totalTokens` Total colony tokens at the time of creation,  `amount` Total amount of tokens taken aside for reward payout,  `tokenAddress` Token address,  `blockTimestamp` Block number at the time of creation.
     */
    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
     * @param _payoutId Id of the reward payout
     */
    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
     * Get the non-mapping properties of a pot by id.
     * @param _id Id of the pot which details to get
     * @returns associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, PayoutassociatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainIdpayoutsWeCannotMake Number of payouts that cannot be completed with the current funding
     */
    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the number of funding pots in the colony.
     * @returns count The funding pots count
     */
    getFundingPotCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the `_token` balance of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns balance Funding pot supply balance
     */
    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the assigned `_token` payouts of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns payout Funding pot payout amount
     */
    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimColonyFunds(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
     * @param _token Address of the token, `0x0` value indicates Ether
     * @returns amount Total amount of tokens in funding pots other than the rewards pot (id 0)
     */
    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
